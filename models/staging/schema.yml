version: 2

sources:
  - name: raw
    database: "{{ target.project }}"
    schema: raw_data
    tables:
      - name: api_raw_data
        data_tests:
          - dbt_utils.source_accepted_range:
              field: ingestion_time
              min_value: '2020-01-01'
              max_value: "{{ dbt_utils.current_timestamp() }}"

models:
  - name: stg_stations
    description: "Cleaned and deduplicated station data from the CBIBS API"
    columns:
      - name: station_short_name
        description: "Unique identifier for each station"
        data_tests:
          - unique
          - not_null
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "{{ station_short_name }} = CAST({{ station_short_name }} AS STRING)"
      - name: station_long_name
        description: "Full name of each station"
        data_tests:
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "{{ station_long_name }} = CAST({{ station_long_name }} AS STRING)"
      - name: is_active
        description: "Flag to define whether the station is active and the data is current"
        data_tests:
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "{{ is_active }} = CAST({{ is_active }} AS STRING)"
      - name: latitude
        description: "Station latitude at last reading"
        data_tests:
          - not_null
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "SAFE_CAST({{ latitude }} AS FLOAT64) IS NOT NULL"
      - name: longitude
        description: "Station longitude at last reading"
        data_tests:
          - not_null
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "SAFE_CAST({{ longitude }} AS FLOAT64) IS NOT NULL"
      - name: last_updated
        description: "Timestamp of last station data update"
        data_tests:
          - not_null
          - accepted_values:
              values: ['{{ elementary.cast_to_timestamp(elementary.get_column_object()) }} IS NOT NULL']
              quote: false

  - name: stg_measurements
    columns:
      - name: measurement_id
        description: "Unique measurement ID"
        data_tests:
          - unique
          - not_null
      - name: ingestion_time
        description: "Timestamp of last measurement update"
        data_tests:
          - not_null
          - accepted_values:
              values: ['IS_TIMESTAMP({{ elementary.get_column_object() }})']
              quote: false
          - dbt_utils.expression_is_true:
              expression: "{{ ingestion_time }} >= cast(measurement_time as timestamp)"
      - name: station_short_name
        description: "Unique identifier for each station"
        data_tests:
          - not_null
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "{{ station_short_name }} = CAST({{ station_short_name }} AS STRING)"
      - name: parameter_report_name
        description: "Formatted measurement name"
        data_tests:
          - not_null
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "{{ parameter_report_name }} = CAST({{ parameter_report_name }} AS STRING)"
      - name: parameter_actual_name
        description: "Snake-case measurement name"
        data_tests:
          - not_null
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "{{ parameter_actual_name }} = CAST({{ parameter_actual_name }} AS STRING)"
      - name: parameter_group
        description: "Measurement type"
        data_tests:
          - not_null
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "{{ parameter_group }} = CAST({{ parameter_group }} AS STRING)"
      - name: measurement_time
        description: "Time of sensor measurement"
        data_tests:
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "REGEXP_CONTAINS({{ column_name }}, r'^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\+[0-9]{2}$')"
          - accepted_values:
              values: ['TRUE']
              quote: false
              values: ["REGEX_MATCH('^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\+[0-9]{2}$')"]
          - dbt_utils.expression_is_true:
              expression: "{{ measurement_time }} <= current_timestamp"
      - name: value
        description: "Sensor measurement value"
        data_tests:
          - not_null
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "SAFE_CAST({{ value }} AS FLOAT64) IS NOT NULL"
      - name: unit
        description: "Unit of sensor measurement"
        data_tests:
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "{{ unit }} = CAST({{ unit }} AS STRING)"
      - name: quality_flag
        description: "Data quality flag"
        data_tests:
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "{{ quality_flag }} = CAST({{ quality_flag }} AS STRING)"
      - name: elevation
        description: "Station elevation"
        data_tests:
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "SAFE_CAST({{ elevation }} AS FLOAT64) IS NOT NULL"
      - name: measurement_interval
        description: "Interval between measurements in seconds"
        data_tests:
          - accepted_values:
              values: ['TRUE']
              quote: false
              where: "SAFE_CAST({{ measurement_interval }} AS FLOAT64) IS NOT NULL"